\documentclass{llncs}
\usepackage{times}
\usepackage{subcaption}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{tikz}
\usepackage[ruled,vlined,linesnumbered]{algorithm2e}
\usepackage{adjustbox}
\usepackage[colorlinks,linkcolor=black,anchorcolor=black,
    citecolor=blue,urlcolor=black,bookmarks=true]{hyperref}

\newcommand\JY[1]{\textcolor{green}{#p1}}
\newcommand\LL[1]{\textcolor{red}{#1}}
\newcommand\SJ[1]{\textcolor{blue}{#1}}

%\newtheorem{definition}{Definition}
%\newtheorem{theorem}{Theorem}
%\newtheorem{lemma}{Lemma}
%\newtheorem{example}{Example}
%\newtheorem{proposition}{Proposition}

\begin{document}

%\setcopyright{acmcopyright}

\title{Loop Invariant Generation through Active Learning}
% \author{
% Jiaying Li, Li Li, Le Guang Loc, Jun Sun\\
% \institute{
% Singapore University of Technology and Design \\
% \email{jiaying\_li@mymail.sutd.edu.sg\\ \{li\_li,guangloc\_le,sunjun\}@sutd.edu.sg}}
% }

\author{
Jiaying Li, Li Li, Le Guang Loc, Jun Sun\\
\institute{
Singapore University of Technology and Design \\
\email{\{jiaying\_li,li\_li,guangloc\_le,sunjun\}@sutd.edu.sg}}
}

%%\numberofauthors{4}
%\author{
%% You can go ahead and credit any number of authors here,
%% e.g. one 'row of three' or two rows (consisting of one row of three
%% and a second row of one, two or three).
%%
%% The command \alignauthor (no curly braces needed) should
%% precede each author name, affiliation/snail-mail address and
%% e-mail address. Additionally, tag each line of
%% affiliation/address with \affaddr, and tag the
%% e-mail address with \email.
%%
%% 1st. author
%\alignauthor
%Jiaying Li\\
%       \affaddr{Singapore University of Technology and Design}\\
%       \email{jiaying\_li@mymail.sutd.edu.sg}
%% 2nd. author
%\alignauthor
%Li Li\\
%       \affaddr{Singapore University of Technology and Design}\\
%       \email{li\_li@sutd.edu.sg}
%% 3rd. author
%\and  % use '\and' if you need 'another row' of author names
%\alignauthor
%Le Guang Loc\\
%       \affaddr{Singapore University of Technology and Design}\\
%       \email{guangloc\_le@sutd.edu.sg}
%% 4th. author
%\alignauthor
%Jun Sun\\
%       \affaddr{Singapore University of Technology and Design}\\
%       \email{sunjun@sutd.edu.sg}
%}

\maketitle

\begin{abstract}
Loop invariant generation is one of the fundamental problems in program analysis and verification. In this work, we propose a framework for automatic loop invariant generation through iterations of active learning and checking. Given a Hoare triple of a program containing a loop, we start with random sampling of program states in the loop at runtime. We then categorize the program states based on whether they satisfy the pre-condition and/or post-condition. Next, machine learning techniques (e.g., SVM with kernel methods) are employed to generate candidate loop invariants. The quality of the generated candidates are however limited by the sampled program states. We automatically improve the candidates through active learning (e.g., selective sampling). Only after the candidate invariants cannot be further improved through active learning, we employ verification techniques to check whether the invariants can be used to prove the Hoare triple. If it is not, the counter-examples are used to enrich the sampled program states and we repeat the above process again. We develop a prototype implementation and apply it to verify benchmark programs including those from the software verification competition.
\end{abstract}

\input{introduction.tex}
% \input{example.tex}
\input{sampling.tex}
\input{classification.tex}
\input{verification.tex}
\input{evaluation.tex}
\input{related.tex}
\input{conclusion.tex}

\bibliographystyle{abbrv}
\bibliography{zeno}

\end{document}
