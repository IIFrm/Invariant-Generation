Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.5-svn (Java HotSpot(TM) 64-Bit Server VM 1.8.0_111) started (CPAchecker.run, INFO)

line 16: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

Using predicate analysis with SMTInterpol 2.1-238-g1f06d6a-comp and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting iteration 1 of invariant generation with abstract interpretation. (PredicateCPA:CPAInvariantGenerator:CPAInvariantGenerator$InvariantGenerationTask.call, INFO)

Repeated loading of Eclipse source parser (PredicateCPA:CPAInvariantGenerator:InvariantsCPA:TargetLocationProvider:EclipseParsers.getClassLoader, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Error path found, starting counterexample check with CPACHECKER. (CounterexampleCheckAlgorithm.checkCounterexample, INFO)

Using the following resource limits: CPU-time limit of 900s (CounterexampleCheck:ResourceLimitChecker.fromConfiguration, INFO)

Error path found, but identified as infeasible by counterexample check with CPACHECKER. (CounterexampleCheckAlgorithm.checkCounterexample, INFO)

Infeasible counterexample found, but could not remove it from the ARG. Therefore, we cannot prove safety. (CounterexampleCheckAlgorithm.checkCounterexample, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Analysis incomplete: no errors found, but not everything could be checked. (CPAchecker.analyzeResult, WARNING)

real 3.74
user 4.50
sys 0.16
