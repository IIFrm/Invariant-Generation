(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun h1 (Int Int Int Int) Bool)
(declare-fun h2 (Int Int Int Int) Bool)
(declare-fun h3 (Int Int Int Int) Bool)
(declare-fun h4 (Int Int Int Int) Bool)
(declare-fun h5 (Int Int Int Int) Bool)
(declare-fun h6 (Int Int Int Int) Bool)
(declare-fun h7 (Int Int Int Int) Bool)
(declare-fun h8 (Int Int Int Int) Bool)
(declare-fun h9 (Int Int Int Int) Bool)
(declare-fun h10 (Int Int Int Int) Bool)
(declare-fun h11 (Int Int Int Int) Bool)
(declare-fun h12 (Int Int Int Int) Bool)
(declare-fun h13 (Int Int Int Int) Bool)
(declare-fun h14 (Int Int Int Int) Bool)
(declare-fun h15 (Int Int Int Int) Bool)
(declare-fun h16 (Int Int Int Int) Bool)
(declare-fun h17 (Int Int Int Int) Bool)
(declare-fun h18 (Int Int Int Int) Bool)
(declare-fun h19 (Int Int Int Int) Bool)
(declare-fun h20 (Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int))(=> (= 1 1) (h1 A B A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (= D 0) (h1 A B C E)) (h2 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h2 A B C D) (h3 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h3 A B C D) (h4 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h4 A B C D) (h5 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h5 A B C D) (h6 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (>= (- C D) 1) (h6 A B C D)) (h7 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (= E (+ (- 1) D)) (h7 A B C E)) (h8 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (<= (- C D) 0) (h6 A B C D)) (h9 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h9 A B C D) (h10 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h10 A B C D) (h11 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h8 A B C D) (h5 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h11 A B C D) (h12 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (>= C 1) (h12 A B C D)) (h13 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h13 A B C D) (h14 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (<= C 0) (h12 A B C D)) (h15 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h15 A B C D) (h16 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (>= (- C D) 1) (h14 A B C D)) (h17 A B C D))))
(assert (not (exists ((A Int) (B Int) (C Int) (D Int))(h17 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (<= (- C D) (- 1)) (h14 A B C D)) (h18 A B C D))))
(assert (not (exists ((A Int) (B Int) (C Int) (D Int))(h18 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (= C D) (h14 A B C D)) (h19 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h19 A B C D) (h16 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (h16 A B C D) (h20 A B C D))))
(check-sat)
