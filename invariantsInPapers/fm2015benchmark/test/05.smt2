(set-logic HORN)
(declare-fun Loop (Bool Bool Int Int Int Int Int Int Int Int) Bool)
(declare-fun Trace (Bool Int Int) Bool)

(assert(
	forall((?C Bool)(?F Bool)
		(?X Int)(?XP Int)
		(?Y Int)(?YP Int)
		(?I Int)(?IP Int)
		(?J Int)(?JP Int))
	(=> ?C
		(= ?XP ?X)
		(= ?YP ?Y)
		(= ?JP ?J)
		(= ?IP ?I)		
	(Loop ?C ?F ?X ?XP ?Y ?YP ?I ?IP ?J ?JP))))

(assert(
	forall((?C Bool)(?F Bool)
		(?X Int)(?XP Int)(?XPP Int)
		(?Y Int)(?YP Int)(?YPP Int)
		(?I Int)(?IP Int)(?IPP Int)
		(?J Int)(?JP Int)(?JPP Int)(?JPPP Int))
	(=> (and (not ?C)
		(= ?XP (+ ?X 1))
		(= ?YP (+ ?Y 1))
		(= ?IP (+ ?I ?XP))
		(= ?JP (+ ?J ?YP))
		?F
		(= ?JPP (+ ?JP 1))
		(Loop ?C ?F ?XP ?XPP ?YP ?YPP ?IP ?IPP ?JPP ?JPPP))
		(Loop ?C ?F ?X ?XPP ?Y ?YPP ?I ?IPP ?J ?JPPP))))

(assert(
	forall((?C Bool)(?F Bool)
		(?X Int)(?XP Int)(?XPP Int)
		(?Y Int)(?YP Int)(?YPP Int)
		(?I Int)(?IP Int)(?IPP Int)
		(?J Int)(?JP Int)(?JPP Int))
	(=> (and (not ?C)
		(= ?XP (+ ?X 1))
		(= ?YP (+ ?Y 1))
		(= ?IP (+ ?I ?XP))
		(= ?JP (+ ?J ?YP))
		(not ?F)
		(= ?JPP (+ ?JP 1))
		(Loop ?C ?F ?XP ?XPP ?YP ?YPP ?IP ?IPP ?JP ?JPP))
		(Loop ?C ?F ?X ?XPP ?Y ?YPP ?I ?IPP ?J ?JPP))))


(assert(
	forall((?C Bool)(?F Bool)
		(?X Int)(?XP Int)
		(?Y Int)(?YP Int)
		(?I Int)(?IP Int)
		(?J Int)(?JP Int))
	(=> (and
		(= ?X 0)
		(= ?Y 0)
		(= ?I 0)
		(= ?J 0)
		(Loop ?C ?F ?X ?XP ?Y ?YP ?I ?IP ?J ?JP))
	(Trace ?F ?IP ?JP ))))

(assert(
	forall((?F Bool) (?I Int) (?J Int))
	(=> (Trace ?F ?I ?J )
	(>= ?J ?I))))
